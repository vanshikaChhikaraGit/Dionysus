// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    extensions = [vector]
}

model User {
    id           String   @id @default(uuid())
    firstName    String?
    lastName     String?
    emailAddress String   @unique
    imageUrl     String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    credits      Int      @default(150)

    userToProjects UserToProject[]
    questionsAsked Question[]
}

model Project {
    id        String    @id @default(uuid())
    name      String
    githubUrl String
    createdAt DateTime  @default(now())
    deletedAt DateTime?
    updatedAt DateTime  @updatedAt

    userToProjects      UserToProject[]
    Commit             Commit[]
    sourceCodeEmbeddings SourceCodeEmbedding[]
    savedQuestions Question[]
}

model UserToProject {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId    String
    projectId String

    user    User    @relation(fields: [userId], references: [id])
    project Project @relation(fields: [projectId], references: [id])

    @@unique([userId, projectId])
}

model Commit {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    projectId String
    project   Project @relation(fields: [projectId], references: [id])

    commitMessage      String
    commitHash         String
    commitAuthorName   String
    commitAuthorAvatar String
    commitDate         DateTime
    summary            String
}

model SourceCodeEmbedding {
    id               String                      @id @default(uuid())
    summaryEmbedding Unsupported("vector(768)")?
    sourceCode       String
    fileName         String
    summary          String

    projectId String
    project   Project @relation(fields: [projectId], references: [id])
}

model Question{
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    fileReferences Json?
    projectId String 
    project  Project @relation(fields: [projectId],references: [id])

    userId String
    user User @relation(fields: [userId],references: [id])

}
